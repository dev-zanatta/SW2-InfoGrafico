import {
  Fragment,
  Transition,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createTextVNode,
  createVNode,
  inject,
  mergeProps,
  normalizeClass,
  normalizeStyle,
  onBeforeUnmount,
  onMounted,
  openBlock,
  provide,
  ref,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDynamicComponent,
  toDisplayString,
  toHandlerKey,
  toRefs,
  unref,
  watch,
  withCtx
} from "./chunk-G4DFXOZZ.js";

// node_modules/vue-awesome-sidebar/dist/vue-awesome-sidebar.js
var Ce = {
  props: ["data"]
};
var ge = Object.assign(Ce, {
  __name: "HeaderItem",
  setup(e) {
    const t = inject("getSlotByName")("headerItem");
    return (i, u) => {
      var s, r, o;
      return unref(t) ? (openBlock(), createBlock(resolveDynamicComponent(unref(t)), {
        key: 0,
        header: e.data.header
      }, null, 8, ["header"])) : (openBlock(), createElementBlock("div", mergeProps({
        key: 1,
        class: ["vsss-header", (s = e.data) != null && s.class ? (r = e.data) == null ? void 0 : r.class : ""]
      }, (o = e.data) == null ? void 0 : o.attributes), toDisplayString(e.data.header), 17));
    };
  }
});
var _ = (e, n) => {
  const t = e.__vccOpts || e;
  for (const [i, u] of n)
    t[i] = u;
  return t;
};
var pe = {
  name: "MenuItemIcon",
  props: {
    icon: {
      default: ""
    }
  }
};
function Ie(e, n, t, i, u, s) {
  var r, o, c, d;
  return openBlock(), createBlock(resolveDynamicComponent((r = t.icon) != null && r.element ? t.icon.element : "i"), mergeProps({
    class: ["menu-icon", (o = t.icon) != null && o.class ? (c = t.icon) == null ? void 0 : c.class : ""],
    "aria-hidden": "true"
  }, (d = t.icon) == null ? void 0 : d.attributes), {
    default: withCtx(() => [
      createTextVNode(toDisplayString(t.icon.text), 1)
    ]),
    _: 1
  }, 16, ["class"]);
}
var ye = _(pe, [["render", Ie]]);
var be = {
  name: "menu-item",
  components: { MenuItemIconVue: ye },
  data: () => ({
    showChildren: false,
    expanded: false,
    containerHeight: "0",
    hieghtTimeout: null,
    renderTimeOut: null,
    renderChildren: false,
    cacheHieght: null,
    active: false,
    miniActive: false,
    hover: false,
    ContainerOffsetY: 0,
    id: null,
    siblingsHaveIcon: false,
    MakeSpace: false,
    TopcontainerHiefht: "fit-content",
    labelMiniYofsset: 0,
    labelMiniYYofsset: 0,
    miniMenuOffset: 50,
    seTAnimationTimeOut: false,
    topConTime: null
  }),
  props: [
    "smallMenu",
    "header",
    "depth",
    "siblingsHaveIconProp",
    "isParentFlat",
    "item",
    "isMakeSpace",
    "setMaxHeightTopCProp"
  ],
  setup() {
    const e = inject("getSlotByName"), {
      animationDuration: n,
      menuType: t,
      widthMiniMenu: i,
      childrenOpenAnimation: u,
      removeIconSpace: s,
      vueRouterEnabel: r,
      keepChildrenOpen: o,
      checkButtonActive: c,
      ChildrenOpenActiveRoute: d,
      collapsed: l,
      position: g
    } = inject("sidebarProps"), k = inject("browserAgent"), f = inject("currentRoute"), H = inject("isSameUrl"), B = inject("extractChildrenRoutes"), C = inject("menuMounted"), j = inject("miniMenu"), q = inject("MenuScroll"), K = inject("MenuHover"), Y = inject("getRandomUid"), L = inject("updateCurrantItemHover"), P = inject("updateCurranContainerHover"), D = inject("CurrantItemHover"), A = inject("menuDirection"), N = inject("emitOut"), F = inject("updateIsCollapsed");
    let W = e("itemApendIcon"), U = e("itemPrepandIcon"), V = e("menuItemLabel");
    return {
      animationDuration: n,
      menuItemLabel: V,
      updateIsCollapsed: F,
      currentRoute: f,
      menuMounted: C,
      itemApendIcon: W,
      itemPrepandIcon: U,
      miniMenu: j,
      MenuScroll: q,
      MenuHover: K,
      keepChildrenOpen: o,
      ChildrenOpenActiveRoute: d,
      emitOut: N,
      menuDirection: A,
      checkButtonActive: c,
      CurrantItemHover: D,
      updateCurranContainerHover: P,
      updateCurrantItemHover: L,
      getRandomUid: Y,
      vueRouterEnabel: r,
      extractChildrenRoutes: B,
      isSameUrl: H,
      menuType: t,
      widthMiniMenu: i,
      childrenOpenAnimation: u,
      removeIconSpace: s,
      collapsed: l,
      userAgentHeight: k,
      position: g
    };
  },
  watch: {
    currentRoute() {
      this.checkActive();
    },
    collapsed(e) {
      e && this.miniMenu && this.depth === 0 && this.closeItemChildren();
    },
    hover() {
      this.miniMenu && this.hover, this.id || (this.id = this.getRandomUid()), this.hover ? (this.seTAnimationTimeOut = true, this.updateCurrantItemHover(this.id), this.openItemCildren(), this.$nextTick(() => {
        setTimeout(() => {
          this.setItemOffsetHeight();
        }, 0);
        const e = this.$refs.labelRef.getBoundingClientRect();
        this.labelMiniYofsset = e[this.menuDirection], this.labelMiniYYofsset = e.top;
      })) : this.CurrantItemHover === this.id && this.MenuHover || this.closeItemChildren();
    },
    MenuHover() {
      this.MenuHover || this.closeItemChildren();
    },
    CurrantItemHover() {
      this.CurrantItemHover != this.id && this.closeItemChildren();
    },
    MenuScroll() {
      if (this.isMobile)
        this.closeItemChildren();
      else {
        this.setItemOffsetHeight();
        const e = this.$refs.labelRef.getBoundingClientRect();
        this.labelMiniYofsset = e[this.menuDirection], this.labelMiniYYofsset = e.top;
      }
    },
    miniMenu() {
      this.closeItemChildren(), this.$nextTick(() => {
        this.setItemOffsetHeight();
      });
    }
  },
  created() {
    this.checkActive();
  },
  mounted() {
    if (this.checkSiblingsForIcon(), this.setItemOffsetHeight(), this.position != "fixed") {
      const e = () => {
        if ("ontouchstart" in document.documentElement) {
          this.closeItemChildren();
          return;
        }
        this.setItemOffsetHeight();
        const t = this.$refs.labelRef.getBoundingClientRect();
        this.labelMiniYofsset = t[this.menuDirection], this.labelMiniYYofsset = t.top;
      }, n = () => {
        window.removeEventListener("scroll", e);
      };
      window.addEventListener("scroll", e), onBeforeUnmount(n);
    }
  },
  computed: {
    isMobile() {
      return "ontouchstart" in document.documentElement;
    },
    miniActiveClass() {
      var e, n;
      return (e = this.item) != null && e.miniActiveClass ? (n = this.item) == null ? void 0 : n.miniActiveClass : "miniActive";
    },
    activeClass() {
      var e, n;
      return (e = this.item) != null && e.activeClass ? (n = this.item) == null ? void 0 : n.activeClass : "activeClass";
    },
    menuDirectionOposite() {
      return this.menuDirection === "right" ? "left" : "right";
    },
    labelName() {
      var e, n;
      return this.miniMenu ? this.depth != 0 ? (e = this.item) == null ? void 0 : e.name : false : (n = this.item) == null ? void 0 : n.name;
    },
    heifOfContainer() {
      return this.containerHeight === this.userAgentHeight ? this.containerHeight : this.containerHeight + "px";
    },
    transitionTime() {
      return `all ${this.animationDuration / 1e3}s ease-in-out`;
    },
    menuItemSlotData() {
      var e, n;
      return {
        icon: { icon: ((e = this.item) == null ? void 0 : e.icon) || {}, name: (n = this.item) == null ? void 0 : n.name }
      };
    },
    shouldMouseEnterEvent() {
      return this.miniMenu && this.depth == 0 ? "mouseover" : null;
    },
    keyOrClick() {
      return this.miniMenu && this.depth == 0 ? this.expanded ? this.isMobile ? "touchend" : "click" : this.isMobile ? "" : "click" : "click";
    },
    shouldMouseLeaveEvent() {
      return this.miniMenu && this.depth == 0 ? "mouseleave" : null;
    },
    ContainerOffsetYConputed() {
      return `${this.ContainerOffsetY}px`;
    },
    menuItemClass() {
      var n, t;
      let e = {};
      return e[`vas-${this.menuType}`] = true, e[((n = this.item) == null ? void 0 : n.class) || ""] = (t = this.item) == null ? void 0 : t.class, {
        miniCollapseIconWidth: this.miniMenu && this.depth == 0,
        MenuItemWidthOnMiniCollapse: this.miniMenu && this.depth != 0,
        menuExpanded: this.menuType === "fully" && (!this.miniMenu && this.expanded && this.depth == 0 || this.miniMenu && this.depth == 1 && this.expanded),
        noIconWidth: this.removeIconSpace && !this.miniMenu && !this.siblingsHaveIconProp && this.isParentFlat,
        noIconwidthMiniMenu: this.removeIconSpace && this.miniMenu && this.depth != 0 && !this.siblingsHaveIconProp && this.isParentFlat,
        ...e
      };
    },
    miniLabelWidth() {
      const e = Number(this.menuType != "fully");
      return this.expanded ? `calc(${this.widthMiniMenu}*${e}/2 - ${this.$refs.menuItem.clientWidth}*${e}px/2 + ${this.$refs.menuItem.clientWidth}px + 250px - 1.5px)` : "35px";
    },
    miniLabelDirection() {
      return `calc((${this.widthMiniMenu} - ${this.miniMenuOffset}px) / 2)`;
    }
  },
  methods: {
    mousewheelop(e) {
      document.querySelector(".vas-menu").scrollBy(0, e.deltaY);
    },
    PushToTopOfCallStack(e) {
      setTimeout(() => {
        e();
      }, 0);
    },
    resloveHref(e) {
      return this != null && this.$router ? this.$router.resolve(e).href : e;
    },
    checkActive() {
      var n, t, i, u;
      if (!!this.checkButtonActive)
        if (((n = this.item) == null ? void 0 : n.href) && this.isSameUrl(this.resloveHref((t = this.item) == null ? void 0 : t.href)))
          this.active = true, this.miniActive = false;
        else {
          if (this.active = false, !((i = this.item) != null && i.children))
            return;
          let s = false, r = this.extractChildrenRoutes((u = this.item) == null ? void 0 : u.children, "href") || [];
          for (var e = 0; e < r.length; e++)
            if (this.isSameUrl(this.resloveHref(r[e]))) {
              if (s = true, this.miniActive = true, this.menuMounted || this.miniMenu)
                break;
              this.ChildrenOpenActiveRoute && this.openItemCildren();
              break;
            }
          this.miniActive = s;
        }
    },
    labelClick() {
      this.hover ? this.miniLabelClick() : this.toggleMenu();
    },
    clickCompose() {
      var e, n, t, i;
      (e = this.item) != null && e.collapseOnClick && this.updateIsCollapsed(true), this.emitOut("item-click", this.item), this.vueRouterEnabel && ((n = this.item) == null ? void 0 : n.href) && this.$router && ((i = this.$router) == null || i.push((t = this.item) == null ? void 0 : t.href));
    },
    miniLabelClick() {
      this.clickCompose();
    },
    toggleMenu() {
      var e;
      this.clickCompose(), (e = this.item) != null && e.children && (clearTimeout(this.hieghtTimeout), clearTimeout(this.renderTimeOut), this.showChildren ? this.closeItemChildren() : this.openItemCildren());
    },
    setSmallMenuDataForToggle(e) {
      clearTimeout(this.topConTime), clearTimeout(this.hieghtTimeout), clearTimeout(this.renderTimeOut), this.$nextTick(() => {
        this.expanded = e;
      }), this.showChildren = e;
    },
    checkSiblingsForIcon() {
      var n, t, i, u;
      if (!(!this.removeIconSpace && this.menuType == "fully") && !!((n = this.item) != null && n.children)) {
        for (var e = 0; e < ((t = this.item) == null ? void 0 : t.children.length); e++)
          if ((u = (i = this.item) == null ? void 0 : i.children[e]) != null && u.icon) {
            this.siblingsHaveIcon = true;
            break;
          }
      }
    },
    openItemCildren() {
      var e, n, t;
      this.depth === 1 && this.miniMenu && this.setMaxHeightTopCProp(), this.miniMenu && this.depth === 0 && (this.showChildren = true, this.$nextTick(() => {
        this.expanded = true;
      })), (e = this.item) != null && e.children && (this.expanded || (this.setSmallMenuDataForToggle(true), this.renderChildren = true, this.cacheHieght ? this.containerHeight = this.cacheHieght : this.containerHeight = this.menuMounted ? ((n = this.item) == null ? void 0 : n.children.length) * ((t = this.$refs.menuItem) == null ? void 0 : t.offsetHeight) + 3 : this.userAgentHeight, this.cacheHieght = null, this.menuMounted && (this.miniMenu && this.depth === 0 && (this.containerHeight = this.userAgentHeight), this.hieghtTimeout = setTimeout(
        () => {
          this.containerHeight = this.userAgentHeight;
        },
        this.childrenOpenAnimation ? this.animationDuration : 0
      ))));
    },
    closeItemChildren() {
      var e, n, t;
      if (this.seTAnimationTimeOut = false, !this.menuCollapsed && this.miniMenu && this.depth === 0) {
        this.setSmallMenuDataForToggle(false), this.topConTime = setTimeout(() => {
          this.containerHeight = 0, this.topConTime = null;
        }, this.animationDuration);
        return;
      }
      this.setSmallMenuDataForToggle(false), (e = this.item) != null && e.children && (this.cacheHieght || (this.cacheHieght = (n = this.$refs.container) == null ? void 0 : n.offsetHeight), this.containerHeight = (t = this.$refs.container) == null ? void 0 : t.offsetHeight, this.PushToTopOfCallStack(() => {
      }), setTimeout(() => {
        this.$nextTick(() => {
          this.containerHeight = 0;
        });
      }, 10), !this.keepChildrenOpen && (this.renderTimeOut = setTimeout(
        () => {
          setTimeout(() => {
            this.renderChildren = false;
          }, 20), this.cacheHieght = null;
        },
        this.childrenOpenAnimation ? this.animationDuration : 0
      )));
    },
    setMaxHeightTopC() {
      var n;
      const e = (n = this.$refs.topContainerRef) == null ? void 0 : n.getBoundingClientRect();
      this.MakeSpace ? this.TopcontainerHiefht = e.height + "px" : this.TopcontainerHiefht = e.height + innerHeight - (e.top + e.height) - 2 + "px";
    },
    setItemOffsetHeight() {
      var e, n, t;
      if (this.depth == 0) {
        const i = this.$refs.menuItem.getBoundingClientRect(), u = (e = this.$refs.topContainerRef) == null ? void 0 : e.getBoundingClientRect().height;
        let s = 0;
        (n = this.item) != null && n.children && (s = i.height * ((t = this.item) == null ? void 0 : t.children.length) + i.height), u && s + i.top - 15 > innerHeight ? (this.ContainerOffsetY = innerHeight - i.bottom, this.MakeSpace = true) : (this.ContainerOffsetY = i.top, this.MakeSpace = false), this.miniMenuOffset = i.width;
      }
    }
  }
};
var ke = {
  key: 0,
  class: "BlockBack"
};
var He = {
  key: 0,
  class: "labelName"
};
var Oe = { key: 1 };
var Se = { key: 1 };
var we = {
  key: 0,
  class: "labelName"
};
var Te = {
  key: 0,
  class: "labelminiSub"
};
var Ae = {
  key: 2,
  class: "labelminiSub"
};
function Re(e, n, t, i, u, s) {
  var c, d, l, g, k;
  const r = resolveComponent("MenuItemIconVue"), o = resolveComponent("menu-item", true);
  return openBlock(), createElementBlock("div", {
    class: normalizeClass([s.menuItemClass, "menu-item-base alignCenter"]),
    ref: "menuItem",
    style: normalizeStyle({
      float: i.miniMenu && t.depth === 1 ? i.menuDirection : s.menuDirectionOposite
    })
  }, [
    e.active ? (openBlock(), createElementBlock("div", ke)) : createCommentVNode("", true),
    createBaseVNode("div", {
      class: normalizeClass(["label", {
        TransitionC: !i.miniMenu || i.miniMenu && !e.showChildren,
        menuexpand: e.showChildren,
        [s.activeClass]: e.active,
        [s.miniActiveClass]: e.miniActive,
        labelHoverClass: t.depth != 0 && i.miniMenu || !i.miniMenu
      }]),
      [toHandlerKey(s.shouldMouseEnterEvent)]: n[0] || (n[0] = (f) => this.hover = true),
      [toHandlerKey(s.shouldMouseLeaveEvent)]: n[1] || (n[1] = (f) => this.hover = false),
      [toHandlerKey(s.keyOrClick)]: n[2] || (n[2] = (...f) => s.labelClick && s.labelClick(...f)),
      style: normalizeStyle({
        [i.menuDirection == "left" ? "paddingLeft" : "paddingRight"]: i.menuType === "fully" ? `${t.depth * 18}px` : "",
        background: t.depth == 0 && !e.active && i.miniMenu ? "none" : ""
      })
    }, [
      createBaseVNode("div", {
        class: normalizeClass(["left", { marginAuto: i.miniMenu && t.depth === 0, collapseEnd: i.miniMenu }]),
        ref: "labelRef"
      }, [
        !i.removeIconSpace || i.removeIconSpace && t.siblingsHaveIconProp ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          i.itemPrepandIcon ? i.itemPrepandIcon ? (openBlock(), createBlock(resolveDynamicComponent(i.itemPrepandIcon), {
            key: 1,
            icon: (d = t.item) == null ? void 0 : d.icon,
            active: e.active,
            miniActive: e.miniActive,
            isChildrenMenuOpen: e.showChildren
          }, null, 8, ["icon", "active", "miniActive", "isChildrenMenuOpen"])) : createCommentVNode("", true) : (openBlock(), createBlock(r, {
            key: 0,
            icon: (c = t.item) == null ? void 0 : c.icon
          }, null, 8, ["icon"]))
        ], 64)) : createCommentVNode("", true),
        s.labelName ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          i.menuItemLabel ? (openBlock(), createBlock(resolveDynamicComponent(i.menuItemLabel), {
            key: 1,
            labelName: s.labelName,
            active: e.active,
            miniActive: e.miniActive,
            isChildrenMenuOpen: e.showChildren
          }, null, 8, ["labelName", "active", "miniActive", "isChildrenMenuOpen"])) : (openBlock(), createElementBlock("span", He, toDisplayString(s.labelName), 1))
        ], 64)) : createCommentVNode("", true)
      ], 2),
      i.miniMenu && t.depth != 0 || !i.miniMenu ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        t.item.children && !i.itemApendIcon ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(["icons postIconOpenAnima", { opened: e.showChildren }])
        }, null, 2)) : createCommentVNode("", true),
        t.item.children && i.itemApendIcon ? (openBlock(), createElementBlock("div", Oe, [
          i.itemApendIcon ? (openBlock(), createBlock(resolveDynamicComponent(i.itemApendIcon), {
            key: 0,
            icon: (l = t.item) == null ? void 0 : l.icon,
            isChildrenMenuOpen: e.showChildren,
            active: e.active,
            miniActive: e.miniActive
          }, null, 8, ["icon", "isChildrenMenuOpen", "active", "miniActive"])) : createCommentVNode("", true)
        ])) : createCommentVNode("", true)
      ], 64)) : createCommentVNode("", true)
    ], 16),
    !i.miniMenu || t.depth != 0 && i.miniMenu ? (openBlock(), createElementBlock("div", Se, [
      t.item.children ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(["items-container", { "small-menu": t.smallMenu }]),
        style: normalizeStyle({ maxHeight: s.heifOfContainer, transition: s.transitionTime }),
        ref: "container"
      }, [
        e.renderChildren ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(t.item.children, (f, H) => (openBlock(), createBlock(o, {
          siblingsHaveIconProp: e.siblingsHaveIcon,
          isParentFlat: t.siblingsHaveIconProp,
          key: H,
          item: f,
          depth: t.depth + 1,
          smallMenu: t.smallMenu
        }, null, 8, ["siblingsHaveIconProp", "isParentFlat", "item", "depth", "smallMenu"]))), 128)) : createCommentVNode("", true)
      ], 6)) : createCommentVNode("", true)
    ])) : createCommentVNode("", true),
    i.miniMenu && t.depth === 0 && !i.collapsed ? (openBlock(), createElementBlock("div", {
      key: 2,
      class: normalizeClass({ topContainer: t.depth == 0, vasopacitiy: !e.expanded }),
      ref: "topContainerRef",
      style: normalizeStyle({
        [e.MakeSpace ? "bottom" : "top"]: `calc(${s.ContainerOffsetYConputed} - 1px)`,
        [i.menuDirection]: `calc(${i.widthMiniMenu} - 1px)`,
        maxHeight: e.TopcontainerHiefht,
        width: e.showChildren ? "250px" : "0px",
        zIndex: e.showChildren ? "850" : "849",
        animationDelay: e.seTAnimationTimeOut ? "0.3s" : "0"
      })
    }, [
      createBaseVNode("div", {
        onClick: n[3] || (n[3] = (...f) => s.miniLabelClick && s.miniLabelClick(...f)),
        onMousewheel: n[4] || (n[4] = (...f) => s.mousewheelop && s.mousewheelop(...f)),
        class: normalizeClass(["labelMini", {
          [s.miniActiveClass]: e.miniActive,
          [s.activeClass]: e.active
        }]),
        style: normalizeStyle({
          position: "fixed",
          whiteSpace: "nowrap",
          [i.menuDirection]: i.menuType === "fully" ? "0px" : s.miniLabelDirection,
          width: s.miniLabelWidth,
          [e.MakeSpace ? "bottom" : "top"]: s.ContainerOffsetYConputed,
          opacity: t.depth === 0 && e.showChildren ? "1" : "0"
        })
      }, [
        e.showChildren ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(["left", { marginAuto: i.miniMenu && t.depth === 0 }]),
          style: normalizeStyle({
            [i.menuDirection]: i.widthMiniMenu,
            top: e.labelMiniYYofsset + "px"
          })
        }, [
          i.menuItemLabel ? (openBlock(), createBlock(resolveDynamicComponent(i.menuItemLabel), {
            key: 1,
            labelName: (k = t.item) == null ? void 0 : k.name,
            active: e.active,
            miniActive: e.miniActive,
            isChildrenMenuOpen: e.showChildren
          }, null, 8, ["labelName", "active", "miniActive", "isChildrenMenuOpen"])) : (openBlock(), createElementBlock("span", we, toDisplayString((g = t.item) == null ? void 0 : g.name), 1))
        ], 6)) : createCommentVNode("", true)
      ], 38),
      t.depth == 0 && !e.MakeSpace ? (openBlock(), createElementBlock("div", Te)) : createCommentVNode("", true),
      t.item.children ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: normalizeClass(["items-container", { "small-menu": t.smallMenu }]),
        style: normalizeStyle({
          maxHeight: s.heifOfContainer,
          transition: s.transitionTime
        }),
        ref: "container"
      }, [
        e.renderChildren ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(t.item.children, (f, H) => (openBlock(), createBlock(o, {
          siblingsHaveIconProp: e.siblingsHaveIcon,
          isParentFlat: t.siblingsHaveIconProp,
          key: H,
          item: f,
          depth: t.depth + 1,
          smallMenu: t.smallMenu,
          setMaxHeightTopCProp: s.setMaxHeightTopC,
          isMakeSpace: e.MakeSpace
        }, null, 8, ["siblingsHaveIconProp", "isParentFlat", "item", "depth", "smallMenu", "setMaxHeightTopCProp", "isMakeSpace"]))), 128)) : createCommentVNode("", true)
      ], 6)) : createCommentVNode("", true),
      t.depth == 0 && e.MakeSpace ? (openBlock(), createElementBlock("div", Ae)) : createCommentVNode("", true)
    ], 6)) : createCommentVNode("", true)
  ], 6);
}
var Be = _(be, [["render", Re]]);
var Le = {
  name: "MenuHl",
  props: {
    data: {
      default: ""
    }
  }
};
function Pe(e, n, t, i, u, s) {
  var r, o, c, d;
  return openBlock(), createBlock(resolveDynamicComponent((r = t.data) != null && r.element ? t.data.element : "hr"), mergeProps({
    class: ["vas-hr", (o = t.data) != null && o.class ? (c = t.data) == null ? void 0 : c.class : ""]
  }, (d = t.data) == null ? void 0 : d.attributes), null, 16, ["class"]);
}
var De = _(Le, [["render", Pe]]);
var Ee = (e, n) => {
  const {
    menu: t,
    menuType: i,
    miniMenu: u,
    collapsed: s,
    animationDuration: r,
    width: o,
    widthMiniMenu: c,
    removeIconSpace: d,
    closeOnClickOutSide: l,
    overLayerOnOpen: g,
    childrenOpenAnimation: k,
    position: f,
    collapseBreakPoint: H,
    dark: B,
    vueRouterEnabel: C,
    keepChildrenOpen: j,
    checkButtonActive: q,
    ChildrenOpenActiveRoute: K,
    rtl: Y
  } = toRefs(e), L = ref(s.value);
  ref(n.slots);
  const P = ref(false), D = ref(false), A = ref(u.value), N = ref(false), F = ref(null), W = ref(null), U = (p) => n.slots.hasOwnProperty(p) ? n.slots[p] : null, V = (p) => {
    L.value = p;
  }, ne = () => {
    D.value = !D.value;
  }, se = (p) => {
    N.value = p;
  }, ae = (p) => {
    F.value = p;
  }, le = (p) => {
    W.value = p;
  }, $ = computed(() => Y.value ? "right" : "left"), re = (p, me) => {
    n.emit(p, me);
  }, oe = (p) => {
    A.value = p;
  };
  let ue = navigator.userAgent.indexOf("Firefox") != -1 ? "-moz-max-content" : "fit-content", he = 3;
  const ce = () => he++;
  return onMounted(() => {
    P.value = true;
  }), provide("sidebarProps", {
    menu: t,
    menuType: i,
    collapsed: L,
    miniMenu: A,
    animationDuration: r,
    width: o,
    widthMiniMenu: c,
    removeIconSpace: d,
    closeOnClickOutSide: l,
    overLayerOnOpen: g,
    childrenOpenAnimation: k,
    position: f,
    collapseBreakPoint: H,
    vueRouterEnabel: C,
    checkButtonActive: q,
    ChildrenOpenActiveRoute: K,
    keepChildrenOpen: j,
    dark: B,
    rtl: Y
  }), provide("getSlotByName", U), provide("browserAgent", ue), provide("menuMounted", P), provide("miniMenu", A), provide("MenuScroll", D), provide("MenuHover", N), provide("getRandomUid", ce), provide("updateCurrantItemHover", ae), provide("updateCurranContainerHover", le), provide("CurrantItemHover", F), provide("CurranContainerHover", W), provide("menuDirection", $), provide("updateIsCollapsed", V), provide("emitOut", re), {
    getIsCollapsed: L,
    getIsminiMenu: A,
    updateIsCollapsed: V,
    getSlotByName: U,
    updateminiMenu: oe,
    menuMounted: P,
    updateMenuScroll: ne,
    updateMenuHover: se,
    menuDirection: $
  };
};
function xe(e, n, t) {
  if (!e)
    return;
  const i = (r) => {
    if (t.value) {
      u();
      return;
    }
    r.target == e.value || r.composedPath().includes(e.value) || n();
  }, u = () => {
    window.removeEventListener("click", i);
  }, s = () => {
    u(), setTimeout(() => {
      window.addEventListener("click", i);
    }, 0);
  };
  return onBeforeUnmount(u), { removeSideBarListner: u, addSideBarListner: s };
}
function Ye(e, n) {
  if (!e)
    return;
  n(e > innerWidth);
  let t = window.innerWidth;
  const i = () => {
    t != window.innerWidth && (n(e > innerWidth), t = window.innerWidth);
  };
  window.addEventListener("resize", i), onBeforeUnmount(() => {
    window.removeEventListener("resize", i);
  });
}
var Ne = (e, n) => {
  toRefs(e);
  const t = ref(window.location);
  function i(r, o = t.value) {
    return o.href === o.origin + r || o.pathname + o.hash === r || o.pathname + o.search === r || o.href === r || o.hash === r;
  }
  function u(r, o) {
    if (!!r)
      return Object.entries(r).reduce(
        (c, [d, l]) => d === o ? c.concat(l) : typeof l == "object" ? c.concat(u(l, o)) : c,
        []
      );
  }
  const s = (r) => {
    t.value = { ...r };
  };
  return provide("currentRoute", t), provide("updateCurrentRoute", s), provide("isSameUrl", i), provide("extractChildrenRoutes", u), {
    isSameUrl: i,
    extractChildrenRoutes: u,
    currentRoute: t,
    updateCurrentRoute: s
  };
};
var Fe = {
  name: "vas-menu",
  props: {
    menu: {
      type: Array,
      required: true
    },
    menuType: {
      type: String,
      default: "simple"
    },
    collapsed: {
      type: Boolean,
      default: false
    },
    miniMenu: {
      type: Boolean,
      default: false
    },
    animationDuration: {
      type: Number,
      default: 300
    },
    width: {
      type: String,
      default: "290px"
    },
    widthMiniMenu: {
      type: String,
      default: "65px"
    },
    autoCollapse: {
      type: Number,
      default: null
    },
    removeIconSpace: {
      type: Boolean,
      default: false
    },
    closeOnClickOutSide: {
      type: Boolean,
      default: false
    },
    overLayerOnOpen: {
      type: Boolean,
      default: false
    },
    childrenOpenAnimation: {
      type: Boolean,
      default: true
    },
    position: {
      type: String,
      default: "fixed"
    },
    keepChildrenOpen: {
      type: Boolean,
      default: false
    },
    ChildrenOpenActiveRoute: {
      type: Boolean,
      default: true
    },
    checkButtonActive: {
      type: Boolean,
      default: true
    },
    vueRouterEnabel: {
      type: Boolean,
      default: false
    },
    BottomMiniMenuBtn: {
      type: Boolean,
      default: true
    },
    paddingTop: {
      type: String,
      default: "0px"
    },
    dark: {
      type: Boolean
    },
    rtl: {
      type: Boolean,
      default: false
    }
  },
  emits: {
    "item-click"(e) {
      return !!e;
    },
    "update:collapsed"(e) {
      return typeof e == "boolean";
    },
    "update:miniMenu"(e) {
      return typeof e == "boolean";
    }
  },
  data: () => ({
    smallMenu: false,
    siblingsHaveIcon: false
  }),
  components: {
    MenuItem: Be,
    HeaderItem: ge,
    Menuline: De
  },
  mounted() {
    this.checkSiblingsForIcon(), window.addEventListener(
      "hashchange",
      () => {
        this.updateCurrentRoute(window.location);
      },
      false
    );
  },
  watch: {
    async $route() {
      this.updateCurrentRoute(window.location);
    },
    miniMenuRef() {
      this.miniMenuRef && this.updateMenuHover(true);
    }
  },
  computed: {
    menuScrollEvent() {
      return this.miniMenuRef ? "scroll" : null;
    },
    mouseEnterEvent() {
      return this.miniMenuRef ? "mouseenter" : null;
    },
    mouseLeaveEvent() {
      return this.miniMenuRef ? "mouseleave" : null;
    }
  },
  methods: {
    onMenuScroll() {
      this.updateMenuScroll();
    },
    onEnter() {
      this.updateMenuHover(true);
    },
    onLeave() {
      this.updateMenuHover(false);
    },
    checkSiblingsForIcon() {
      var n;
      if (!(!this.removeIconSpace && this.menuType == "fully")) {
        for (var e = 0; e < this.menu.length; e++)
          if ((n = this.menu[e]) != null && n.icon) {
            this.siblingsHaveIcon = true;
            break;
          }
      }
    },
    toggleMiniCollapse() {
      const e = !this.miniMenuRef;
      this.updateminiMenu(e), this.$emit("update:miniMenu", e);
    }
  },
  setup(e, n) {
    const {
      getIsCollapsed: t,
      getIsminiMenu: i,
      updateMenuScroll: u,
      updateMenuHover: s,
      updateminiMenu: r,
      menuDirection: o,
      updateIsCollapsed: c
    } = Ee(e, n), { updateCurrentRoute: d } = Ne(e), l = ref(null), g = ref(e.overLayerOnOpen), { removeSideBarListner: k, addSideBarListner: f } = xe(
      l,
      () => {
        c(!t.value);
      },
      t
    );
    e.closeOnClickOutSide && f(), watch(
      () => t.value,
      (C) => {
        n.emit("update:collapsed", C), e.overLayerOnOpen && (g.value = !C), e.closeOnClickOutSide && (C ? k() : f());
      }
    ), watch(
      () => e.collapsed,
      (C) => {
        c(C);
      }
    ), watch(
      () => e.closeOnClickOutSide,
      (C) => {
        C ? f() : k();
      }
    ), watch(
      () => e.miniMenu,
      (C) => {
        r(C);
      }
    ), watch(
      () => e.overLayerOnOpen,
      (C) => {
        C ? g.value = !t.value : g.value = false;
      }
    );
    const H = computed(() => i.value ? e.widthMiniMenu : e.width), B = computed(() => [
      `${e.dark ? "dark" : "white"}-theme`,
      e.rtl ? "rtl" : "ltr"
    ]);
    return Ye(e.autoCollapse, c), e.overLayerOnOpen && (g.value = !t.value), {
      sidebarMenuWidth: H,
      updateMenuScroll: u,
      sidebarClass: B,
      sidebarmen: l,
      updateCurrentRoute: d,
      updateMenuHover: s,
      overLayer: g,
      isCollapsed: t,
      updateminiMenu: r,
      miniMenuRef: i,
      menuDirection: o
    };
  }
};
var We = { class: "vas-footer" };
var Ue = createBaseVNode("div", { class: "footer-wrapper" }, null, -1);
var Ve = {
  key: 0,
  class: "vas-over-layer"
};
function ze(e, n, t, i, u, s) {
  var d;
  const r = resolveComponent("MenuItem"), o = resolveComponent("HeaderItem"), c = resolveComponent("Menuline");
  return openBlock(), createElementBlock(Fragment, null, [
    createBaseVNode("nav", {
      class: normalizeClass(["vas-menu", i.sidebarClass]),
      ref: "sidebarmen",
      style: normalizeStyle([{
        width: i.sidebarMenuWidth,
        position: t.position,
        [i.menuDirection]: i.isCollapsed ? `calc(-1*(${i.sidebarMenuWidth} + 2px))` : "0px",
        direction: t.rtl ? "rtl" : "ltr",
        paddingTop: t.paddingTop
      }, { overflow: "hidden" }]),
      [toHandlerKey(s.mouseEnterEvent)]: n[2] || (n[2] = (...l) => s.onEnter && s.onEnter(...l)),
      [toHandlerKey(s.mouseLeaveEvent)]: n[3] || (n[3] = (...l) => s.onLeave && s.onLeave(...l))
    }, [
      createBaseVNode("div", {
        [toHandlerKey(s.menuScrollEvent)]: n[0] || (n[0] = (...l) => s.onMenuScroll && s.onMenuScroll(...l)),
        class: normalizeClass(["menu-wraper", {
          miniCoolapseMenu: i.miniMenuRef,
          compeleteCoolapseMenu: i.isCollapsed
        }]),
        style: normalizeStyle({
          width: i.sidebarMenuWidth
        })
      }, [
        renderSlot(e.$slots, "header"),
        (openBlock(true), createElementBlock(Fragment, null, renderList(t.menu, (l, g) => (openBlock(), createElementBlock(Fragment, { key: g }, [
          !(l != null && l.header) && !(l != null && l.LineShow) ? (openBlock(), createBlock(r, {
            key: 0,
            item: l,
            depth: 0,
            smallMenu: e.smallMenu,
            siblingsHaveIconProp: e.siblingsHaveIcon
          }, null, 8, ["item", "smallMenu", "siblingsHaveIconProp"])) : (l == null ? void 0 : l.header) && !i.miniMenuRef ? (openBlock(), createBlock(o, {
            key: 1,
            data: l
          }, null, 8, ["data"])) : l != null && l.LineShow ? (openBlock(), createBlock(c, {
            key: 2,
            data: l
          }, null, 8, ["data"])) : createCommentVNode("", true)
        ], 64))), 128)),
        createBaseVNode("div", We, [
          Ue,
          renderSlot(e.$slots, "footer")
        ])
      ], 16),
      t.BottomMiniMenuBtn ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: "bottomBtn",
        onClick: n[1] || (n[1] = (...l) => s.toggleMiniCollapse && s.toggleMiniCollapse(...l))
      }, [
        (d = e.$slots) != null && d.BottomMiniMenuBtn ? renderSlot(e.$slots, "BottomMiniMenuBtn", {
          key: 1,
          miniMenu: i.miniMenuRef
        }) : (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(["icons bottomBtnIcon", { ssdSpin: !i.miniMenuRef }])
        }, null, 2))
      ])) : createCommentVNode("", true)
    ], 16),
    createVNode(Transition, { name: "vas-fade" }, {
      default: withCtx(() => [
        i.overLayer ? (openBlock(), createElementBlock("div", Ve)) : createCommentVNode("", true)
      ]),
      _: 1
    })
  ], 64);
}
var _e = _(Fe, [["render", ze]]);
var qe = {
  install: (e) => {
    e.component("VueAwesomeSideBar", _e);
  }
};
export {
  _e as VueAwesomeSideBar,
  qe as default
};
//# sourceMappingURL=vue-awesome-sidebar.js.map
